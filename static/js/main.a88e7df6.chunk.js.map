{"version":3,"sources":["components/Expenses/ExpenseFilter.js","components/UI/Card.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpensesFilter","props","className","value","selected","onChange","event","onChangeFilter","target","Card","classes","children","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpenseChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilterYear","filteredExpenses","filter","toString","selectedYear","ExpensesChart","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"ubA0BeA,EAtBQ,SAACC,GAMtB,OACE,qBAAKC,UAAU,kBAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,mDAEA,yBAAQC,MAAOF,EAAMG,SAAUC,SATP,SAACC,GAC7BL,EAAMM,eAAeD,EAAME,OAAOL,QAQ9B,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,2BCVKM,G,MANF,SAACR,GACZ,IAAMS,EAAU,QAAUT,EAAMC,UAEhC,OAAO,qBAAKA,UAAWQ,EAAhB,SAA0BT,EAAMU,aCU1BC,G,kBAdK,SAACX,GACnB,IAAMY,EAAQZ,EAAMa,KAAKC,eAAe,QAAS,CAAEF,MAAO,SACpDG,EAAMf,EAAMa,KAAKC,eAAe,QAAS,CAAEC,IAAK,YAChDC,EAAOhB,EAAMa,KAAKI,cAExB,OACE,sBAAKhB,UAAU,eAAf,UACE,qBAAKA,UAAU,sBAAf,SAAsCW,IACtC,qBAAKX,UAAU,qBAAf,SAAqCe,IACrC,qBAAKf,UAAU,oBAAf,SAAoCc,SCU3BG,EAhBK,SAAClB,GACnB,OAEE,aADA,CACA,eACE,eAAC,EAAD,CAAMC,UAAU,eAAhB,UACE,cAAC,EAAD,CAAaY,KAAMb,EAAMa,OACzB,sBAAKZ,UAAU,4BAAf,UACE,6BAAKD,EAAMmB,QACX,sBAAKlB,UAAU,sBAAf,cAAuCD,EAAMoB,mBCUxCC,EAnBM,SAACrB,GACpB,OAA2B,IAAvBA,EAAMsB,MAAMC,OACP,oBAAItB,UAAU,0BAAd,gCAIP,oBAAIA,UAAU,gBAAd,SACGD,EAAMsB,MAAME,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEEN,MAAOM,EAAQN,MACfC,OAAQK,EAAQL,OAChBP,KAAMY,EAAQZ,MAHTY,EAAQC,U,OCURC,G,YApBE,SAAC3B,GAEhB,IAAI4B,EAAgB,KAIpB,OAHI5B,EAAM6B,SAAW,IACnBD,EAAgBE,KAAKC,MAAO/B,EAAME,MAAQF,EAAM6B,SAAY,KAAO,KAGnE,sBAAK5B,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,SAEE,qBACEA,UAAU,kBACV+B,MAAO,CAAEC,OAAQL,OAGrB,qBAAK3B,UAAU,mBAAf,SAAmCD,EAAMkC,aCMhCC,EApBD,SAACnC,GAEb,IAAMoC,EAAkBpC,EAAMqC,WAAWb,KAAI,SAACc,GAAD,OAAeA,EAAUpC,SAEhEqC,EAAeT,KAAKU,IAAL,MAAAV,KAAI,YAAQM,IACjC,OACE,qBAAKnC,UAAU,QAAf,SAEGD,EAAMqC,WAAWb,KAAI,SAACc,GAAD,OACpB,cAAC,EAAD,CAEEpC,MAAOoC,EAAUpC,MACjB2B,SAAUU,EACVL,MAAOI,EAAUJ,OAHZI,EAAUJ,aCgBVO,EA3BM,SAACzC,GAEpB,IAF8B,EAExB0C,EAAkB,CACtB,CAAER,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,IAdK,cAkBRF,EAAM2C,UAlBE,IAkB9B,2BAAsC,CAAC,IAA5BlB,EAA2B,QAGpCiB,EADqBjB,EAAQZ,KAAK+B,YACJ1C,OAASuB,EAAQL,QArBnB,8BAwB9B,OAAO,cAAC,EAAD,CAAOiB,WAAYK,KCqCbG,EAzDE,SAAC7C,GAEhB,MAAsC8C,mBAAS,QAA/C,mBAAOC,EAAP,KAAqBC,EAArB,KAMMC,EAAmBjD,EAAMsB,MAAM4B,QAAO,SAACzB,GAC3C,OAAOA,EAAQZ,KAAKI,cAAckC,aAAeJ,KAQnD,OACE,8BACE,eAAC,EAAD,CAAM9C,UAAU,WAAhB,UAEE,cAAC,EAAD,CACEE,SAAU4C,EACVzC,eAnBoB,SAAC8C,GAC3BJ,EAAcI,MAoBV,cAACC,EAAD,CAAeV,SAAUM,IACzB,cAAC,EAAD,CAAc3B,MAAO2B,U,OC+CdK,G,YA7EK,SAACtD,GACnB,MAAwC8C,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA0CV,mBAAS,IAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAAsCZ,mBAAS,IAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KAgCA,OACE,uBAAMC,SAnBc,SAACxD,GACrBA,EAAMyD,iBAEN,IAAMC,EAAc,CAElB5C,MAAOoC,EACPnC,QAASqC,EACT5C,KAAM,IAAImD,KAAKL,IAIjB3D,EAAMiE,kBAAkBF,GAExBP,EAAgB,IAChBE,EAAiB,IACjBE,EAAe,KAIf,UACE,sBAAK3D,UAAU,wBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,0CACA,uBACEiE,KAAK,OACLhE,MAAOqD,EACPnD,SAtCiB,SAACC,GAC1BmD,EAAgBnD,EAAME,OAAOL,aAwCzB,sBAAKD,UAAU,uBAAf,UACE,2CACA,uBACEiE,KAAK,SACLC,IAAI,OACJC,KAAK,OACLlE,MAAOuD,EACPrD,SA5CkB,SAACC,GAC3BqD,EAAiBrD,EAAME,OAAOL,aA8C1B,sBAAKD,UAAU,uBAAf,UACE,yCACA,uBACEiE,KAAK,OACLC,IAAI,aACJ3B,IAAI,aACJtC,MAAOyD,EACPvD,SAlDgB,SAACC,GACzBuD,EAAevD,EAAME,OAAOL,gBAqD1B,sBAAKD,UAAU,uBAAf,UACE,wBAAQiE,KAAK,SAAb,yBACA,wBAAQA,KAAK,SAASG,QAASrE,EAAMsE,SAArC,4BC7BOC,EAvCI,SAACvE,GAClB,MAAkC8C,oBAAS,GAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KAmBA,OACE,qBAAKxE,UAAU,cAAf,SACIuE,EAGA,cAAC,EAAD,CACEP,kBAjBuB,SAACS,GAC9B,IAAMX,EAAW,2BACZW,GADY,IAEfhD,GAAII,KAAK6C,SAASxB,aAGpBnD,EAAM4E,aAAab,GAEnBU,GAAa,IAUPH,SArBmB,WACzBG,GAAa,MAgBT,wBAAQJ,QApBa,WACzBI,GAAa,IAmBT,gCCvBFI,EAAiB,CACrB,CACEnD,GAAI,KACJP,MAAO,eACPC,OAAQ,MACRP,KAAM,IAAImD,KAAK,KAAM,EAAG,KAE1B,CAAEtC,GAAI,KAAMP,MAAO,SAAUC,OAAQ,OAAQP,KAAM,IAAImD,KAAK,KAAM,EAAG,KACrE,CACEtC,GAAI,KACJP,MAAO,gBACPC,OAAQ,OACRP,KAAM,IAAImD,KAAK,KAAM,EAAG,KAE1B,CACEtC,GAAI,KACJP,MAAO,oBACPC,OAAQ,IACRP,KAAM,IAAImD,KAAK,KAAM,EAAG,MA8Bbc,EAzBH,WACV,MAAgChC,mBAAS+B,GAAzC,mBAAOlC,EAAP,KAAiBoC,EAAjB,KAgBA,OACE,gCACE,cAAC,EAAD,CAAYH,aARU,SAACnD,GACzBsD,GAAY,SAACC,GACX,MAAM,CAAEvD,GAAR,mBAAoBuD,UAOpB,cAAC,EAAD,CAAU1D,MAAOqB,QC1CVsC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,O","file":"static/js/main.a88e7df6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./ExpenseFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  // Task1: listen to the change event of the select element\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        {/* Task5: Inside of ExpenseFilter, use the task4 prop to set this select dropdown */}\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import \"./Card.css\";\r\n\r\n// function Card(props) {\r\nconst Card = (props) => {\r\n  const classes = \"card \" + props.className; //\r\n\r\n  return <div className={classes}>{props.children}</div>; // props.children is the content of the card, which is the children of the Card component\r\n};\r\n\r\nexport default Card;\r\n","import \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import \"./ExpenseItem.css\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport React from \"react\";\r\n\r\nconst ExpenseItem = (props) => {\r\n  return (\r\n    /* Card is a custom component, not like the div, build-in component that css will support automactically, it will do only been told */\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n        {/* <button onClick={clickHandler}>Change Title</button> */}\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nconst ExpensesList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found no expenses!</h2>;\r\n  }\r\n  //Output the item array\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.items.map((expense) => (\r\n        <ExpenseItem\r\n          key={expense.id}\r\n          title={expense.title}\r\n          amount={expense.amount}\r\n          date={expense.date}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  // Calculate how much the bar should be filled\r\n  let barFillHeight = \"0%\";\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        {/* The style attribute want a js object as a value, so we need to use {} */}\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import React from \"react\";\r\nimport \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\nconst Chart = (props) => {\r\n  // Get the value array from the props, transform dataPoint to dataPoint.value as a new array\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  // Get the max value from the dataPointValues array, use ... to pull out all the values as 12 arguments for max()\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n  return (\r\n    <div className=\"chart\">\r\n      {/* output the chart dynanmicly */}\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"../Chart/Chart\";\r\n\r\nconst ExpenseChart = (props) => {\r\n  // Initial state of the chart data points\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  // Loop through the items and add the values to the chartDataPoints (use for of loop since it is an array)\r\n  for (const expense of props.expenses) {\r\n    // Use the month as index to find the correct chartDataPoint and add the value\r\n    const expenseMonth = expense.date.getMonth();\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n  // Pass the chartDataPoints to the Chart component\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpenseChart;\r\n","import \"./Expenses.css\";\r\nimport React, { useState } from \"react\";\r\nimport ExpensesFilter from \"./ExpenseFilter\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nconst Expenses = (props) => {\r\n  // Task3: create a state variable to store the filter value\r\n  const [filteredYear, setFilterYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilterYear(selectedYear);\r\n  };\r\n  // If we have the data already, we just need to change how it renders with simple solutions\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n  // // Task2: Forward the selected value to Expense Component\r\n  // const filterChangeHandler = (selectedYear) => {\r\n  //   console.log(\"Expense.js\");\r\n  //   console.log(selectedYear);\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        {/* Task4: Set current state value as selected prop to ExpensesFilter */}\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n\r\n        {/* use map() to get the expenses array data, for each element create a <ExpenseItem> component and use ternary expression to show message if there is no expense item under certain condition */}\r\n        {/* {filteredExpenses.length === 0 ? (\r\n          <p>No expenses found.</p>\r\n        ) : (\r\n          filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))\r\n        )} */}\r\n\r\n        {/* Alternative conditional outputting 1 - Abusing && features */}\r\n        {/* {filteredExpenses.length === 0 && <p>No expenses found.</p>}\r\n        {filteredExpenses.length > 0 &&\r\n          filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))} */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n  };\r\n  //By default, if the Add Expense button is clicked, the page reloads. To prevent the behavior, we need the submitHandler function to manually collect the data and do something with it.\r\n  const submitHandler = (event) => {\r\n    event.preventDefault(); // prevent default behavior, which is to send the request and refresh the page\r\n    //Create an object to store the data\r\n    const expenseData = {\r\n      // Store the current state data in the object\r\n      title: enteredTitle,\r\n      amount: +enteredAmount, // + sign is to convert the string to number\r\n      date: new Date(enteredDate),\r\n    };\r\n    //console.log(expenseData);\r\n    //Pass the expenseData object to the onSaveExpenseData function, saveExpenseDataHandler is defined in NewExpense component, now being executed in ExpenseForm component.\r\n    props.onSaveExpenseData(expenseData);\r\n    // Reset the state, clear the input fields\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle} //bind the value to the state, so when setEnteredTitle is called, the value will be updated. When change the state, change the input value\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2023-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  // The handler should triggered when the Add new expense button is clicked\r\n  const editExpenseHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData, // This is the old values that are being overwritten (that we dont need to change in this state)\r\n      id: Math.random().toString(),\r\n    };\r\n    //Add expense data to the expenses array\r\n    props.onAddExpense(expenseData);\r\n    //After adding the expense data, stop editing\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing ? (\r\n        <button onClick={editExpenseHandler}>Add New Expense</button>\r\n      ) : (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n\r\n      {/* {!isEditing && <button onClick={editExpenseHandler}>Add New Expense</button>} */}\r\n      {/* passing saveExpenseDataHandler through onSaveExpenseData pointer \"SUPPER IMPORTANT!-Child to Parent component communication\"*/}\r\n      {/* {isEditing && <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />} */}\r\n      {/* if something changed in ExpenseForm Component, onSaveExpenseData will be triggered */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import React, { useState } from \"react\";\r\nimport Expenses from \"./components/Expenses/Expenses\";\r\nimport NewExpense from \"./components/NewExpense/NewExpense\";\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"Toilet Paper\",\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: \"e3\",\r\n    title: \"Car Insurance\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk (Wooden)\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\n// function App() {\r\nconst App = () => {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n  // return React.createElement(\r\n  //   \"div\",\r\n  //   {},\r\n  //   React.createElement(\"h2\", {}, \"Let's get started!\"),\r\n  //   React.createElement(Expenses, { items: expenses })\r\n  // );\r\n\r\n  // Before return, define a function to add expense to expenses array\r\n  const addExpenseHandler = (expense) => {\r\n    setExpenses((prevExpenses) => {\r\n      return [expense, ...prevExpenses];\r\n    });\r\n  };\r\n  // In return, add a pointer to <NewExpense />\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses items={expenses} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom/client\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App.js\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}